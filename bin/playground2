#!/bin/bash

set -e

# curl -fsSL https://raw.githubusercontent.com/mawinkler/c1-playground/master/bin/playground | bash

CURRENT_PATH=$(pwd)

# Source helpers
if [ -f $PGPATH/bin/playground-helpers.sh ]; then
    .  $PGPATH/bin/playground-helpers.sh
else
    curl -fsSL https://raw.githubusercontent.com/mawinkler/c1-playground/master/bin/playground-helpers.sh -o /tmp/playground-helpers.sh
    . /tmp/playground-helpers.sh
fi

# Check for dialog
DIALOG_INSTALLED=$(apt -qq list dialog 2>/dev/null)
if [[ "$DIALOG_INSTALLED" == *"installed"* ]]; then
    echo "dialog installed"
else
    sudo apt install -y dialog
fi

DIALOG_CANCEL=1
DIALOG_ESC=255
HEIGHT=12
WIDTH=70

# Define the dialog exit status codes
: ${DIALOG_OK=0}
: ${DIALOG_CANCEL=1}
: ${DIALOG_HELP=2}
: ${DIALOG_EXTRA=3}
: ${DIALOG_ITEM_HELP=4}
: ${DIALOG_ESC=255}

# Duplicate (make a backup copy of) file descriptor 1 
# on descriptor 3
exec 3>&1

display_result() {
    dialog --title "$1" \
        --no-collapse \
        --msgbox "$result" 20 100
}

#######################################
# Main Menu
#######################################
function menu_main() {

    # exec 3>&1

    while true
    do
        if [ "${PGPATH}" == "" ]; then
            items=( "Tools" "Bootstrap" )
        else
            items=( "Tools" "Manage Tools and CSPs..." \
                    "Clusters" "Manage Clusters..." \
                    "Services" "Manage Services..." \
                    "Config" "Manage Configuration..." )
        fi
            TITLE="Main Menu"
            check_k8s
            BACKTITLE="Playground: ${CLUSTER}"
        choice=$(dialog --title "${TITLE}" \
                    --backtitle "${BACKTITLE}" \
                    --cancel-label "Exit" \
                    --separate-widget "Widget" \
                    --menu "Please select" ${HEIGHT} ${WIDTH} 12 "${items[@]}" \
                    2>&1 1>&3)
        exit_status=$?
        case $exit_status in
            $DIALOG_CANCEL)
            clear
            echo "Program terminated."
            exec 3>&-
            exit
            ;;
            $DIALOG_ESC)
            clear
            echo "Program aborted." >&2
            exec 3>&-
            exit 1
            ;;
        esac
        case $choice in
            "Tools")
                clear
                if [ -f "$PGPATH/.pghome" ]; then
                    menu_tools
                else
                    curl -fsSL https://raw.githubusercontent.com/mawinkler/c1-playground/master/bin/bootstrap.sh -o /tmp/bootstrap.sh
                    . /tmp/bootstrap.sh ${CURRENT_PATH}
                    result="Exit menu and logout from the shell.\n\nThen relogin or create a new shell before continuing."
                    display_result "Important"
                fi
                ;;
            "Clusters")
                menu_clusters
                ;;
            "Services")
                menu_services
                ;;
            "Config")
                menu_config
                ;;
            *) ;; # some action on other
        esac
    done
}

#######################################
# Tools Menu
#######################################
function menu_tools() {

    # exec 3>&1

    local items=( "Tools" "Update Tools & Playground" \
            "CLIs" "Install/Update CLI..." \
            "Authenticate" "Authenticate to CSP..." )
    local TITLE="Tools Menu"
    check_k8s
    local BACKTITLE="Playground: ${CLUSTER}"
    while choice=$(dialog --title "${TITLE}" \
                --backtitle "${BACKTITLE}" \
                --cancel-label "Exit" \
                --separate-widget "Widget" \
                --menu "Please select" ${HEIGHT} ${WIDTH} 12 "${items[@]}" \
                2>&1 1>&3)
    do
        exit_status=$?
        case $exit_status in
            $DIALOG_CANCEL)
            clear
            echo "Going back."
            break
            ;;
            $DIALOG_ESC)
            clear
            echo "Program aborted." >&2
            exec 3>&-
            exit 1
            ;;
        esac
        case $choice in
            "Tools")
                clear
                .  $PGPATH/bin/bootstrap.sh
                result="Exit menu and logout from the shell.\n\nThen relogin or create a new shell before continuing."
                display_result "Important"
                ;;
            "CLIs")
                menu_cli
                ;;
            "Authenticate")
                menu_authenticate
                ;;
            *) ;; # some action on other
        esac
    done
}

#######################################
# Clusters Menu
#######################################
function menu_clusters() {

    # exec 3>&1

    local items=( "Create" "Create a Cluster..." \
            "Clusters" "Select Cluster Context..." \
            "Kill" "(Danger Zone) Tear Down Cluster..." )
    local TITLE="Clusters Menu"
    check_k8s
    local BACKTITLE="Playground: ${CLUSTER}"
    while choice=$(dialog --title "${TITLE}" \
                --backtitle "${BACKTITLE}" \
                --cancel-label "Exit" \
                --separate-widget "Widget" \
                --menu "Please select" ${HEIGHT} ${WIDTH} 12 "${items[@]}" \
                2>&1 1>&3)
    do
        exit_status=$?
        case $exit_status in
            $DIALOG_CANCEL)
            clear
            echo "Going back."
            break
            ;;
            $DIALOG_ESC)
            clear
            echo "Program aborted." >&2
            exec 3>&-
            exit 1
            ;;
        esac
        case $choice in
            "Create")
                if [ -f $PGPATH/config.json ]; then
                    menu_create_cluster
                else
                    cp $PGPATH/config.json.sample $PGPATH/config.json
                    result="Adapt configuration before continuing."
                    display_result "Important"
                    menu_create_cluster
                fi
                ;;
            "Clusters")
                menu_select_context
                ;;
            "Kill")
                menu_teardown_cluster
                ;;
            *) ;; # some action on other
        esac
    done
}

#######################################
# Services Menu
#######################################
function menu_services() {

    # exec 3>&1

    local items=( "Deploy" "Deploy Services..." \
            "Delete" "(Danger Zone) Delete Services..." \
            "Status" "Namespaces, LoadBalancers, Deployments & DaemonSets" \
            "Services" "Services, Addresses and Credentials" )
    local TITLE="Services Menu"
    check_k8s
    local BACKTITLE="Playground: ${CLUSTER}"
    while choice=$(dialog --title "${TITLE}" \
                --backtitle "${BACKTITLE}" \
                --cancel-label "Exit" \
                --separate-widget "Widget" \
                --menu "Please select" ${HEIGHT} ${WIDTH} 12 "${items[@]}" \
                2>&1 1>&3)
    do
        exit_status=$?
        case $exit_status in
            $DIALOG_CANCEL)
            clear
            echo "Going back."
            break
            ;;
            $DIALOG_ESC)
            clear
            echo "Program aborted." >&2
            exec 3>&-
            exit 1
            ;;
        esac
        case $choice in
            "Deploy")
                menu_deploy
                ;;
            "Delete")
                menu_delete || true
                ;;
            "Status")
                if $(kubectl config current-context &>/dev/null); then
                    # result=$(kubectl get all -A)
                    result=$(kubectl get namespace)
                    display_result "Namespaces"
                    result=$(kubectl get svc -A | grep "LoadBalancer\|NAMESPACE")
                    display_result "LoadBalancers"
                    result=$(kubectl get deployments -A)
                    display_result "Deployments"
                    result=$(kubectl get daemonset -A)
                    display_result "DaemonSets"
                fi
                ;;
            "Services")
                if [ -f $PGPATH/services ]; then
                    result=$(cat $PGPATH/services)
                    display_result "Addresses & Credentials"
                else
                    result="No services file found"
                    display_result "Addresses & Credentials"
                fi
                ;;
            *) ;; # some action on other
        esac
    done
}

#######################################
# Config Menu
#######################################
function menu_config() {

    # exec 3>&1

    local items=( "Disk Space" "Display Disk Space" \
            "Config" "Edit Configuration" \
            "Daemon" "Edit daemon.json" )
    local TITLE="Config Menu"
    check_k8s
    local BACKTITLE="Playground: ${CLUSTER}"
    while choice=$(dialog --title "${TITLE}" \
                --backtitle "${BACKTITLE}" \
                --cancel-label "Exit" \
                --separate-widget "Widget" \
                --menu "Please select" ${HEIGHT} ${WIDTH} 12 "${items[@]}" \
                2>&1 1>&3)
    do
        exit_status=$?
        case $exit_status in
            $DIALOG_CANCEL)
            clear
            echo "Going back."
            break
            ;;
            $DIALOG_ESC)
            clear
            echo "Program aborted." >&2
            exec 3>&-
            exit 1
            ;;
        esac
        case $choice in
            "Disk Space")
                result=$(df -h)
                display_result "Disk Space"
                ;;
            "Config")
                if [ ! -f $PGPATH/config.json ]; then
                    cp $PGPATH/config.json.sample $PGPATH/config.json
                fi
                ${EDITOR} $PGPATH/config.json
                ;;
            "Daemon")
                if [ ! -d "/etc/docker" ]; then
                    result="Please run Deploy/Update Tools."
                    display_result
                else
                    sudo ${EDITOR} /etc/docker/daemon.json
                    sudo systemctl restart docker
                fi
                ;;
            *) ;; # some action on other
        esac
    done
}

function menu_cli() {

    # exec 3>&1
    local items=("AWS" "AWS CLI" \
           "Azure" "Azure CLI" \
           "GCP" "GCP CLI")
    local TITLE="Install/Update CLI"
    check_k8s
    local BACKTITLE="Playground: ${CLUSTER}"
    while choice=$(dialog --title "${TITLE}" \
                    --backtitle "${BACKTITLE}" \
                    --cancel-label "Back" \
                    --separate-widget "Widget" \
                    --menu "Please select" ${HEIGHT} ${WIDTH} 4 "${items[@]}" \
                    2>&1 1>&3)
    do
        exit_status=$?
        case $exit_status in
            $DIALOG_CANCEL)
            clear
            echo "Going back."
            break
            ;;
            $DIALOG_ESC)
            clear
            echo "Program aborted." >&2
            exec 3>&-
            exit 1
            ;;
        esac
        case $choice in
            "AWS")
                clear
                curl -fsSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
                unzip /tmp/awscliv2.zip -d /tmp
                sudo /tmp/aws/install --update
                rm -Rf /tmp/aws /tmp/awscliv2.zip

                curl -fsSL "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
                sudo mv /tmp/eksctl /usr/local/bin
                rm -Rf /tmp/eksctl

                # brew install awscli
                # brew install eksctl
                ;;
            "Azure")
                clear
                curl -fsSL https://packages.microsoft.com/keys/microsoft.asc | \
                    gpg --dearmor | \
                    sudo tee /etc/apt/trusted.gpg.d/microsoft.gpg > /dev/null
                AZ_REPO=$(lsb_release -cs)
                echo "deb [arch=amd64] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" | \
                    sudo tee /etc/apt/sources.list.d/azure-cli.list
                echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-ubuntu-$(lsb_release -cs)-prod $(lsb_release -cs) main" | \
                    sudo tee /etc/apt/sources.list.d/dotnetdev.list

                sudo apt update
                sudo apt install -y azure-cli azure-functions-core-tools-4
                curl -fsSL https://aka.ms/downloadazcopy-v10-linux | tar xz --strip-components=1 -C /tmp
                sudo mv /tmp/azcopy /usr/local/bin
                rm -rf /tmp/azcopy*
                sudo chmod 755 /usr/local/bin/azcopy

                # brew install azure-cli
                ;;
            "GCP")
                clear
                ;;
            *) 
                ;;
        esac
    done
}

function menu_authenticate() {

    # exec 3>&1
    local items=("AWS" "Authenticate to AWS" \
           "Azure" "Authenticate to Azure" \
           "GCP" "Authenticate to GCP")
    local TITLE="Authenticate to CSP"
    check_k8s
    local BACKTITLE="Playground: ${CLUSTER}"
    while choice=$(dialog --title "${TITLE}" \
                    --backtitle "${BACKTITLE}" \
                    --cancel-label "Back" \
                    --separate-widget "Widget" \
                    --menu "Please select" ${HEIGHT} ${WIDTH} 4 "${items[@]}" \
                    2>&1 1>&3)
    do
        exit_status=$?
        case $exit_status in
            $DIALOG_CANCEL)
            clear
            echo "Going back."
            break
            ;;
            $DIALOG_ESC)
            clear
            echo "Program aborted." >&2
            exec 3>&-
            exit 1
            ;;
        esac
        case $choice in
            "AWS")
                clear
                aws configure
                sleep 3
                ;;
            "Azure")
                clear
                az login --scope https://management.core.windows.net//.default --use-device-code
                sleep 3
                ;;
            "GCP")
                clear
                gcloud auth login --no-launch-browser
                sleep 3
                ;;
            *) 
                ;;
        esac
    done
}

function menu_create_cluster() {

    # exec 3>&1
    local items=("Kind" "Local Cluster" \
           "EKS" "Elastic Kubernetes Cluster" \
           "AKS" "Azure Kubernetes Cluster" \
           "GKE" "Google Kubernetes Engine")
    local TITLE="Create a Cluster"
    check_k8s
    local BACKTITLE="Playground: ${CLUSTER}"
    while choice=$(dialog --title "${TITLE}" \
                    --backtitle "${BACKTITLE}" \
                    --cancel-label "Back" \
                    --separate-widget "Widget" \
                    --menu "Please select" ${HEIGHT} ${WIDTH} 4 "${items[@]}" \
                    2>&1 1>&3)
    do
        exit_status=$?
        case $exit_status in
            $DIALOG_CANCEL)
            clear
            echo "Going back."
            break
            ;;
            $DIALOG_ESC)
            clear
            echo "Program aborted." >&2
            exec 3>&-
            exit 1
            ;;
        esac
        case $choice in
            "Kind")
                clear
                if [ $(jq -r '.[][]' /etc/docker/daemon.json | grep "172.250.255" | wc -l) -ne 10 ]; then
                    result="Please adapt /etc/docker/daemon.json.\n\nSee README.md."
                    display_result
                else
                    # echo "$PGPATH/bin/rapid-kind-down.sh" > $PGPATH/bin/.teardown.sh && chmod +x $PGPATH/bin/.teardown.sh
                    $PGPATH/bin/rapid-kind.sh
                fi
                ;;
            "EKS") 
                clear
                # echo "$PGPATH/bin/rapid-eks-down.sh" > $PGPATH/bin/.teardown.sh && chmod +x $PGPATH/bin/.teardown.sh
                $PGPATH/bin/rapid-eks.sh
                ;;
            "AKS")
                clear
                # echo "$PGPATH/bin/rapid-aks-down.sh" > $PGPATH/bin/.teardown.sh && chmod +x $PGPATH/bin/.teardown.sh
                $PGPATH/bin/rapid-aks.sh
                ;;
            "GKE")
                clear
                # echo "$PGPATH/bin/rapid-gke-down.sh" > $PGPATH/bin/.teardown.sh && chmod +x $PGPATH/bin/.teardown.sh
                $PGPATH/bin/rapid-gke.sh
                ;;
            *) 
                ;;
        esac
    done
}

function menu_teardown_cluster() {

    # exec 3>&1
    local items=("Kind" "Local Cluster" \
           "EKS" "Elastic Kubernetes Cluster" \
           "AKS" "Azure Kubernetes Cluster" \
           "GKE" "Google Kubernetes Engine")
    local TITLE="Teardown a Cluster"
    check_k8s
    local BACKTITLE="Playground: ${CLUSTER}"
    while choice=$(dialog --title "${TITLE}" \
                    --backtitle "${BACKTITLE}" \
                    --cancel-label "Back" \
                    --separate-widget "Widget" \
                    --menu "Please select" ${HEIGHT} ${WIDTH} 4 "${items[@]}" \
                    2>&1 1>&3)
    do
        exit_status=$?
        case $exit_status in
            $DIALOG_CANCEL)
            clear
            echo "Going back."
            break
            ;;
            $DIALOG_ESC)
            clear
            echo "Program aborted." >&2
            exec 3>&-
            exit 1
            ;;
        esac
        case $choice in
            "Kind")
                if [ -f "$PGPATH/bin/rapid-kind-down.sh" ]; then
                    clear
                    $PGPATH/bin/rapid-kind-down.sh
                fi
                ;;
            "EKS") 
                if [ -f "$PGPATH/bin/rapid-eks-down.sh" ]; then
                    clear
                    $PGPATH/bin/rapid-eks-down.sh
                fi
                ;;
            "AKS")
                if [ -f "$PGPATH/bin/rapid-aks-down.sh" ]; then
                    clear
                    $PGPATH/bin/rapid-aks-down.sh
                fi
                ;;
            "GKE")
                if [ -f "$PGPATH/bin/rapid-gke-down.sh" ]; then
                    clear
                    $PGPATH/bin/rapid-gke-down.sh
                fi
                ;;
            *) 
                ;;
        esac
    done
}

function menu_select_context() {

    # exec 3>&1

    local items=($(kubectl config get-contexts -o name | \
        awk -v current=$(kubectl config current-context) '
            {
                onoff="off"
                if (current == $0) onoff="on"
                printf("%s %s %s\n", $0, onoff, onoff)
            }
        '))

    touch $PGPATH/services
    cp $PGPATH/services $PGPATH/services-$(kubectl config current-context)

    local TITLE="Select a Context"
    check_k8s
    local BACKTITLE="Playground: ${CLUSTER}"
    while choice=$(dialog --title "${TITLE}" \
                    --backtitle "${BACKTITLE}" \
                    --cancel-label "Back" \
                    --separate-widget "Widget" \
                    --radiolist "Please select" ${HEIGHT} ${WIDTH} 4 "${items[@]}" \
                    2>&1 1>&3)
    do
        exit_status=$?
        case $exit_status in
            $DIALOG_CANCEL)
            clear
            echo "Going back."
            break
            ;;
            $DIALOG_ESC)
            clear
            echo "Program aborted." >&2
            exec 3>&-
            exit 1
            ;;
        esac
        kubectl config use-context $choice
        local currentcontext=$(kubectl config current-context)
        if [ ! -f $PGPATH/services-$currentcontext ]; then
            touch $PGPATH/services-$currentcontext
        fi
        cp $PGPATH/services-$currentcontext $PGPATH/services
        break
    done
}

function menu_deploy() {

    # exec 3>&1
    
    local items=("C1CS" "Container Security" \
           "C1SC" "Smart Check" \
           "Falco" "Falco Runtime Security" \
           "OPA" "Open Policy Agent" \
           "Gatekeeper" "OPA Gatekeeper" \
           "Prometheus" "Prometheus & Grafana" \
           "Starboard" "Starboard & Trivy" \
           "Harbor" "Harbor Registry" \
           "Jenkins" "Jenkins CI/CD" \
           "GitLab" "GitLab CI/CD")
    local TITLE="Deploy"
    check_k8s
    local BACKTITLE="Playground: ${CLUSTER}"
    while choice=$(dialog --title "${TITLE}" \
                    --backtitle "${BACKTITLE}" \
                    --cancel-label "Back" \
                    --separate-widget "Widget" \
                    --menu "Please select" ${HEIGHT} ${WIDTH} 10 "${items[@]}" \
                    2>&1 1>&3)
    do
        exit_status=$?
        case $exit_status in
            $DIALOG_CANCEL)
            clear
            echo "Going back."
            break
            ;;
            $DIALOG_ESC)
            clear
            echo "Program aborted." >&2
            exec 3>&-
            exit 1
            ;;
        esac
        case $choice in
            "C1CS")
                if check_cloudone; then
                    clear
                    $PGPATH/bin/deploy-container-security.sh
                else
                    result="Verify your Cloud One Configuration.\n\nCheck Cloud One Region and API KEY."
                    display_result "Important"
                fi
                ;;
            "C1SC") 
                if check_cloudone; then
                    clear
                    $PGPATH/bin/deploy-smartcheck.sh
                else
                    result="Verify your Cloud One Configuration.\n\nCheck Cloud One Region and API KEY."
                    display_result "Important"
                fi
                ;;
            "Falco")
                clear
                $PGPATH/bin/deploy-falco.sh
                ;;
            "Gatekeeper")
                clear
                $PGPATH/bin/deploy-gatekeeper.sh
                ;;
            "OPA")
                clear
                $PGPATH/bin/deploy-opa.sh
                ;;
            "Prometheus")
                clear
                $PGPATH/bin/deploy-prometheus-grafana.sh
                ;;
            "Starboard")
                clear
                $PGPATH/bin/deploy-starboard.sh
                ;;
            "Harbor")
                clear
                $PGPATH/bin/deploy-harbor.sh
                ;;
            "Jenkins")
                clear
                $PGPATH/bin/deploy-jenkins.sh
                ;;
            "GitLab")
                clear
                $PGPATH/bin/deploy-gitlab.sh
                ;;
            *) 
                ;;
        esac
    done
}

function menu_delete() {

    # exec 3>&1
    
    local items=("C1CS" "Container Security" \
           "C1SC" "Smart Check" \
           "Falco" "Falco Runtime Security" \
           "OPA" "Open Policy Agent" \
           "Gatekeeper" "OPA Gatekeeper" \
           "Prometheus" "Prometheus & Grafana" \
           "Starboard" "Starboard & Trivy" \
           "Harbor" "Harbor Registry" \
           "Jenkins" "Jenkins CI/CD" \
           "GitLab" "GitLab CI/CD")
    local TITLE="(Danger Zone) Delete"
    check_k8s
    local BACKTITLE="Playground: ${CLUSTER}"
    while choice=$(dialog --title "${TITLE}" \
                    --backtitle "${BACKTITLE}" \
                    --cancel-label "Back" \
                    --separate-widget "Widget" \
                    --menu "Please select" ${HEIGHT} ${WIDTH} 10 "${items[@]}" \
                    2>&1 1>&3)
    do
        exit_status=$?
        case $exit_status in
            $DIALOG_CANCEL)
            clear
            echo "Going back."
            break
            ;;
            $DIALOG_ESC)
            clear
            echo "Program aborted." >&2
            exec 3>&-
            exit 1
            ;;
        esac
        case $choice in
            "C1CS")
                clear
                $PGPATH/bin/delete-container-security.sh
                ;;
            "C1SC") 
                clear
                $PGPATH/bin/delete-smartcheck.sh
                ;;
            "Falco")
                clear
                $PGPATH/bin/delete-falco.sh
                ;;
            "Gatekeeper")
                clear
                $PGPATH/bin/delete-gatekeeper.sh
                ;;
            "OPA")
                clear
                $PGPATH/bin/delete-opa.sh
                ;;
            "Prometheus")
                clear
                $PGPATH/bin/delete-prometheus-grafana.sh
                ;;
            "Starboard")
                clear
                $PGPATH/bin/delete-starboard.sh
                ;;
            "Harbor")
                clear
                $PGPATH/bin/delete-harbor.sh
                ;;
            "Jenkins")
                clear
                $PGPATH/bin/delete-jenkins.sh
                ;;
            "GitLab")
                clear
                $PGPATH/bin/delete-gitlab.sh
                ;;
            *) 
                ;;
        esac
    done
}


get_editor
while true
do
    menu_main
done

clear

# Close file descriptor 3
exec 3>&-
